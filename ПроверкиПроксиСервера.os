//Этот файл можно изменять во время работы прокси-сервера. После записи/изменения он подгрузится в сервер автоматически
//Это файл, в котором вы можете писать свои проверки при работе с хранилищем, веб-хуки, да и вообще что захотите.
//
//В этом модуле есть экспортные функции:
//
//	ОбработкаПомещенияВХранилище() - работает в момент, когда пользователь в конфигураторе нажал "поместить в хранилище",
//									ввел комментарий (или не ввел), и нажал ОК. Если в переменной СообщениеОбОшибке вы установите непустую строку,
//									то эта строка вернется ошибкой в конфигуратор и помещения в хранилище не произойдет.
//									Если переменная СообщениеОбОшибке останется пустой строкой - будет произведено помещение в хранилище.
//
//	ОбработкаИзмененияВерсииХранилища() - работает в момент, когда пользователь в конфигураторе открыл версию хранилища в истории хранилища,
//									ввел комментарий (или не ввел), и нажал ОК. Если в переменной СообщениеОбОшибке вы установите непустую строку,
//									то эта строка вернется ошибкой в конфигуратор и изменения версии не произойдет.
//									Если переменная СообщениеОбОшибке останется пустой строкой - будет произведено изменение в версии хранилища.
//
//ПРЕДУПРЕЖДЕНИЕ: все то, что написано между комментариями
//	СИСТЕМНЫЙ КОД +++ и //СИСТЕМНЫЙ КОД ---
//	Изменять строго не рекомендуется! Пишите свой код, вызовы, и прочее внутри функций. Создавайте свои функции и вызывайте из этих двух,
//	в зависимости от потребности.
//	Не удаляйте функции, не редактируйте их, их параметры - это приведет к ошибке работы приложения.
//	Изменять ЗНАЧЕНИЯ параметров функций можно (они прокси-серверу далее не нужны). Имена и расположение и свойства параметров менять нельзя.

//СИСТЕМНЫЙ КОД +++
Функция ОбработкаПомещенияВХранилище(ПараметрыЗапроса) Экспорт
	СообщениеОбОшибке = "";
	//СИСТЕМНЫЙ КОД ---

	ПродолжитьПроверку = Истина;
	Если ПродолжитьПроверку Тогда
		ПродолжитьПроверку = ПомещениеВХранилищеРазрешено(ПараметрыЗапроса, СообщениеОбОшибке);
	КонецЕсли;
	Если ПродолжитьПроверку Тогда
		ПродолжитьПроверку = СообщениеКомментарияСоответствуетШаблону(ПараметрыЗапроса, СообщениеОбОшибке);
	КонецЕсли;

	//СИСТЕМНЫЙ КОД +++
	Возврат СообщениеОбОшибке;
КонецФункции
//СИСТЕМНЫЙ КОД ---

//СИСТЕМНЫЙ КОД +++
Функция ОбработкаИзмененияВерсииХранилища(ПараметрыЗапроса) Экспорт
	СообщениеОбОшибке = "";
	//СИСТЕМНЫЙ КОД ---

	ПродолжитьПроверку = Истина;
	Если ПродолжитьПроверку Тогда
		ПродолжитьПроверку = СообщениеКомментарияСоответствуетШаблону(ПараметрыЗапроса, СообщениеОбОшибке);
	КонецЕсли;

	//СИСТЕМНЫЙ КОД +++
	Возврат СообщениеОбОшибке;
КонецФункции
//СИСТЕМНЫЙ КОД ---

//СИСТЕМНЫЙ КОД +++
Функция ПостОбработкаПомещенияВХранилище() Экспорт
	РезультатБулево = Истина;
	//СИСТЕМНЫЙ КОД ---

	//здесь можно написать свой код

	//СИСТЕМНЫЙ КОД +++
	Возврат РезультатБулево;
КонецФункции
//СИСТЕМНЫЙ КОД ---

//здесь можно написать свои функции, которые можно вызвать из предыдущих двух

Функция СообщениеКомментарияСоответствуетШаблону(ПараметрыЗапроса, СообщениеОбОшибке)
	СписокПрефиксов = СписокПрефиксов();
	СообщениеКомментария = ПараметрыЗапроса.Комментарий;
	Результат = (СписокПрефиксов.Количество() = 0);
	Для каждого Префикс Из СписокПрефиксов Цикл
		РегВыражиение = Новый РегулярноеВыражение(СтрШаблон("\A%1-[0-9]+\r?\n.{6,}", Префикс));
		РегВыражиение.ИгнорироватьРегистр = Истина;
		Если РегВыражиение.Совпадает(СообщениеКомментария) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не Результат Тогда
		СообщениеОбОшибке = "Отказано в помещении в хранилище!
		|Сообщение комментария не соответствует шаблону %Префикс%-%Номер задачи% %Краткое описание с новой строки (не менее 6 символов)%
		|
		|Пример: 
		|TEST-1234
		|Что сделано
		|
		|Список разрешенных префиксов: " + СтрСоединить(СписокПрефиксов, ";") + ".";
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПомещениеВХранилищеРазрешено(ПараметрыЗапроса, СообщениеОбОшибке)
	КаталогНастроечныхФайлов = КаталогНастроечныхФайлов();
	РегВыражиение = Новый РегулярноеВыражение("\\|\/");
	ПриведенноеИмяХранилища = РегВыражиение.Заменить(ПараметрыЗапроса.ИмяСистемы, "^");
	ИмяСтопФайла = НРег(ПриведенноеИмяХранилища + ".стоп");
	ПутьКСтопФайлу = ОбъединитьПути(КаталогНастроечныхФайлов, ИмяСтопФайла);
	Файл = Новый Файл(ПутьКСтопФайлу);
	Результат = Истина;
	Если Файл.Существует() и Файл.ЭтоФайл() Тогда
		СообщениеОбОшибке = ТекстЗапретаИзСтопФайла(ПутьКСтопФайлу);
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат; 
КонецФункции

Функция СписокПрефиксов()
	КаталогНастроечныхФайлов = КаталогНастроечныхФайлов();
	ИмяФайлаСпискаПрефиксов = ИмяФайлаСпискаПрефиксов();
	ПутьКФайлуПрефиксов = ОбъединитьПути(КаталогНастроечныхФайлов, ИмяФайлаСпискаПрефиксов);
	Результат = Новый Массив();
	Файл = Новый Файл(ПутьКФайлуПрефиксов);
	Если Не Файл.Существует() Или Не Файл.ЭтоФайл() Тогда
		Возврат Результат; 
	КонецЕсли;
	МонопольныйРежим = Ложь;
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуПрефиксов, КодировкаТекста.UTF8,,, МонопольныйРежим);
	Стр = ЧтениеТекста.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		Стр = СокрЛП(Стр);
		Если ЗначениеЗаполнено(Стр) И Лев(Стр, 1) <> "#" Тогда
			Результат.Добавить(Стр);
		КонецЕсли;
    	Стр = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	ЧтениеТекста.Закрыть();
	Возврат Результат;
КонецФункции

Функция ТекстЗапретаИзСтопФайла(ПутьКСтопФайлу)
	МонопольныйРежим = Ложь;
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКСтопФайлу, КодировкаТекста.UTF8,,, МонопольныйРежим);
	СтрокиТекстаЗапрета = Новый Массив;
	Стр = ЧтениеТекста.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		Стр = СокрЛП(Стр);
		Если ЗначениеЗаполнено(Стр) И Лев(Стр, 1) <> "#" Тогда
			СтрокиТекстаЗапрета.Добавить(Стр);
		КонецЕсли;
    	Стр = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	ТекстЗапрета = СтрСоединить(СтрокиТекстаЗапрета, Символы.ВК + Символы.ПС);
	Если Не ЗначениеЗаполнено(ТекстЗапрета) Тогда
		ТекстЗапрета = "Администратор запретил помещать объекты в хранилище";
	КонецЕсли;
	ЧтениеТекста.Закрыть();
	Возврат ТекстЗапрета;
КонецФункции

Функция ИмяФайлаСпискаПрефиксов()
	Результат = "список_префиксов";
	Возврат Результат;
КонецФункции

Функция КаталогНастроечныхФайлов()
	ПутьКФайлу = ОбъединитьПути(ТекущийСценарий().Каталог, "КаталогНастроечныхФайлов.conf");
	МонопольныйРежим = Ложь;
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8,,, МонопольныйРежим);
	Результат = ЧтениеТекста.ПрочитатьСтроку();
	Возврат Результат;
КонецФункции

